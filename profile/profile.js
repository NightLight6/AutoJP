document.addEventListener('DOMContentLoaded', function () {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Firebase Auth
    auth.onAuthStateChanged(user => {
        if (!user) {
            alert('‚õî –í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.');
            window.location.href = 'login.html';
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        const userRef = db.ref('users/' + user.uid);
        userRef.once('value').then(snapshot => {
            if (snapshot.exists()) {
                const userData = snapshot.val();
                const currentUser = { uid: user.uid, ...userData };
                localStorage.setItem('currentUser', JSON.stringify(currentUser));
                loadUserProfile(user.uid);
                loadUserAds(user.uid);
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ Auth, –Ω–æ –Ω–µ—Ç –≤ –±–∞–∑–µ ‚Äî —Å–æ–∑–¥–∞—ë–º
                const newUser = {
                    uid: user.uid,
                    email: user.email,
                    username: user.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    createdAt: Date.now()
                };
                db.ref('users/' + user.uid).set(newUser);
                localStorage.setItem('currentUser', JSON.stringify(newUser));
                loadUserProfile(user.uid);
                loadUserAds(user.uid);
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        initUI(user);
    });
});

function initUI(currentUser) {
    const editBtn = document.getElementById('editBtn');
    const editForm = document.getElementById('editForm');
    const cancelBtn = document.getElementById('cancelBtn');
    const changePasswordBtn = document.getElementById('changePasswordBtn');
    const passwordForm = document.getElementById('passwordForm');
    const cancelPasswordBtn = document.getElementById('cancelPasswordBtn');
    const uploadAvatarBtn = document.getElementById('uploadAvatarBtn');
    const avatarInput = document.getElementById('avatarInput');
    const userAvatar = document.getElementById('userAvatar');
    const logoutBtn = document.getElementById('logoutBtn');

    if (!editBtn || !editForm || !cancelBtn || !changePasswordBtn || !passwordForm || !cancelPasswordBtn || !uploadAvatarBtn || !avatarInput || !userAvatar || !logoutBtn) {
        console.error('–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    editBtn.addEventListener('click', () => {
        editForm.style.display = 'block';
        document.getElementById('userInfo')?.style.display = 'none';
        editBtn.style.display = 'none';
        changePasswordBtn.style.display = 'none';
    });

    cancelBtn.addEventListener('click', () => {
        editForm.style.display = 'none';
        document.getElementById('userInfo')?.style.display = 'block';
        editBtn.style.display = 'inline-block';
        changePasswordBtn.style.display = 'inline-block';
    });

    changePasswordBtn.addEventListener('click', () => {
        passwordForm.style.display = 'block';
        document.getElementById('userInfo')?.style.display = 'none';
        editBtn.style.display = 'none';
        changePasswordBtn.style.display = 'none';
    });

    cancelPasswordBtn.addEventListener('click', () => {
        passwordForm.style.display = 'none';
        document.getElementById('userInfo')?.style.display = 'block';
        editBtn.style.display = 'inline-block';
        changePasswordBtn.style.display = 'inline-block';
    });

    editForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const username = document.getElementById('editUsername')?.value.trim();
        const phone = document.getElementById('editPhone')?.value.trim();

        if (!username) {
            alert('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.');
            return;
        }

        try {
            const userRef = db.ref('users/' + currentUser.uid);
            await userRef.update({
                username: username,
                phone: phone
            });

            const updatedUser = { ...currentUser, username, phone };
            localStorage.setItem('currentUser', JSON.stringify(updatedUser));

            alert('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!');
            loadUserProfile(currentUser.uid);
            editForm.style.display = 'none';
            document.getElementById('userInfo')?.style.display = 'block';
            editBtn.style.display = 'inline-block';
        } catch (error) {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
        }
    });

    passwordForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const currentPassword = document.getElementById('currentPassword')?.value;
        const newPassword = document.getElementById('newPassword')?.value;
        const confirmPassword = document.getElementById('confirmPassword')?.value;

        if (newPassword !== confirmPassword) {
            alert('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.');
            return;
        }

        if (newPassword.length < 6) {
            alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.');
            return;
        }

        try {
            const credential = auth.EmailAuthProvider.credential(currentUser.email, currentPassword);
            await auth.currentUser.reauthenticateWithCredential(credential);
            await auth.currentUser.updatePassword(newPassword);

            alert('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!');
            passwordForm.style.display = 'none';
            document.getElementById('userInfo')?.style.display = 'block';
            editBtn.style.display = 'inline-block';
            changePasswordBtn.style.display = 'inline-block';
            passwordForm.reset();
        } catch (error) {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
        }
    });

    uploadAvatarBtn.addEventListener('click', () => {
        avatarInput.click();
    });

    avatarInput.addEventListener('change', async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        if (!file.type.startsWith('image/')) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
            return;
        }

        if (file.size > 2 * 1024 * 1024) {
            alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 2MB.');
            return;
        }

        try {
            const storageRef = storage.ref();
            const avatarRef = storageRef.child('avatars/' + currentUser.uid + '.jpg');
            await avatarRef.put(file);
            const downloadURL = await avatarRef.getDownloadURL();

            const userRef = db.ref('users/' + currentUser.uid);
            await userRef.update({ avatar: downloadURL });

            const updatedUser = { ...currentUser, avatar: downloadURL };
            localStorage.setItem('currentUser', JSON.stringify(updatedUser));

            userAvatar.src = downloadURL;
            userAvatar.style.display = 'block';

            alert('‚úÖ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω!');
        } catch (error) {
            alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message);
        }
    });

    logoutBtn.addEventListener('click', () => {
        auth.signOut().then(() => {
            localStorage.removeItem('currentUser');
            alert('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.');
            window.location.href = 'index.html';
        }).catch(error => {
            alert('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ' + error.message);
        });
    });
}

function loadUserProfile(uid) {
    const userRef = db.ref('users/' + uid);
    userRef.once('value', snapshot => {
        if (snapshot.exists()) {
            const userData = snapshot.val();
            document.getElementById('username')?.textContent = userData.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            document.getElementById('email')?.textContent = userData.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            document.getElementById('phone')?.textContent = userData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω';
            document.getElementById('createdAt')?.textContent = new Date(userData.createdAt).toLocaleDateString('ru-RU');

            if (userData.avatar) {
                const avatarImg = document.getElementById('userAvatar');
                if (avatarImg) {
                    avatarImg.src = userData.avatar;
                    avatarImg.style.display = 'block';
                }
            }

            const editUsername = document.getElementById('editUsername');
            const editPhone = document.getElementById('editPhone');
            if (editUsername) editUsername.value = userData.username || '';
            if (editPhone) editPhone.value = userData.phone || '';
        }
    });
}

function loadUserAds(uid) {
    const adsRef = db.ref('ads');
    adsRef.orderByChild('authorId').equalTo(uid).on('value', snapshot => {
        const userAds = document.getElementById('userAds');
        if (!userAds) return;

        userAds.innerHTML = '';

        if (!snapshot.exists()) {
            userAds.innerHTML = '<p>–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.</p>';
            return;
        }

        const ads = snapshot.val();
        for (let key in ads) {
            const ad = ads[key];
            const adCard = document.createElement('div');
            adCard.className = 'ad-card';
            adCard.innerHTML = `
                <h4>${ad.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
                <p><strong>–ì–æ–¥:</strong> ${ad.year || '‚Äî'} | <strong>–ü—Ä–æ–±–µ–≥:</strong> ${ad.mileage?.toLocaleString() || '‚Äî'} –∫–º</p>
                <p class="price">üí∞ ¬• ${ad.price?.toLocaleString() || '‚Äî'}</p>
                <p><small>–°–æ–∑–¥–∞–Ω–æ: ${new Date(ad.createdAt).toLocaleDateString('ru-RU')}</small></p>
            `;
            userAds.appendChild(adCard);
        }
    });
}